

import { ReactNode } from 'react';
import { RootState } from './src/store/store'; 
import { store as AppStoreType } from './src/store/store'; 
import { z } from 'zod';
import { Session, User } from '@supabase/supabase-js';


// Auth Types
export type AuthSession = Session;
export type AuthUser = User;

// Base interface for Supabase tables
export interface SupabaseBase {
  id?: string; // UUID generated by Supabase
  created_at?: string; // ISO timestamp
  user_id?: string; // Foreign key to auth.users.id
}

export interface IconProps {
  children?: ReactNode;
  size?: number;
  className?: string;
}

export interface Notification {
  id: number;
  message: string;
  type: 'success' | 'error' | 'info'; // Added 'info' for general messages
  duration?: number; // Optional duration in ms
  isUndoable?: boolean;
  undoCallback?: () => void;
}

export type AddNotificationType = (
  message: string, 
  type?: 'success' | 'error' | 'info', 
  options?: { duration?: number; isUndoable?: boolean; undoCallback?: () => void }
) => void;


export interface Client extends SupabaseBase {
  id: string;
  cliente: string;
  cidade: string;
  distancia: string;
  lat_final: string;
  lon_final: string;
  searchableKeywords: string[];
  observacoes?: ClientObservacoes;
}

export interface ClientObservacoes {
  sismografia: string;
  granulometria: string;
  carro_tracado: string;
  carro_passeio: string;
  observacao: string;
}

export interface Hotel extends SupabaseBase {
  id: string;
  client_id: string;
  hotel: string;
  cnpj: string;
  telefone: string;
  dados_pag: string;
  quarto_ind: number;
  quarto_dup: number;
  quarto_tri: number;
}

export interface Collaborator extends SupabaseBase {
  id: string;
  nome: string;
  cpf: string;
  data_nasc: string;
  pix: string;
  banco: string;
  telefone?: string;
  filial?: string;
  funcao?: 'Técnico' | 'Motorista' | 'Mangueirista' | 'Carreteiro' | 'Outros' | '';
  funcao_outros?: string;
  valor_diaria_custom?: number;
  valor_pernoite_custom?: number;
}

export interface AttachmentFile {
  name: string;
  data: string; // base64 data URL
  type?: string; // MIME type
  size?: number; // size in bytes
}

export interface Request extends SupabaseBase {
  id: string;
  solicitante: string;
  data_solicitacao: string;
  centro_custo: string;
  equipe_members: string;
  quant_equipe: number;
  hotel_name: string;
  client_name: string;
  check_in: string;
  check_out: string;
  quant_diarias: number;
  valor_diaria: number;
  valor_total: number;
  pix: string;
  cnpj: string;
  nf: string; 
  nf_attachments: AttachmentFile[]; 
  pix_attachments: AttachmentFile[]; 
}

export interface HistoryRequest extends SupabaseBase {
  id: string;
  solicitante: string;
  data_solicitacao: string;
  centro_custo: string;
  equipe_members: string;
  quant_equipe: number;
  hotel_name: string;
  client_name: string;
  check_in: string;
  check_out: string;
  quant_diarias: number;
  valor_diaria: number;
  valor_total: number;
  pix: string; 
  cnpj: string;
  nf_number?: string; 
  nf_attachments: AttachmentFile[];
  pix_attachments: AttachmentFile[];
  attachments_status: 0 | 1; 
}


export interface Rota extends SupabaseBase {
  id: string;
  filial: string;
  default_latitude: string;
  default_longitude: string;
  isDefault: boolean;
}

export interface StockItem extends SupabaseBase {
  id: string; // e.g., 'uniforme-camisa-polo-m'
  classe: 'UNIFORME' | 'EPI';
  tipo: string;
  tamanho: string;
  quantidade: number;
}

export interface StockHistoryItem extends SupabaseBase {
  id: string;
  idColaborador: string;
  nomeColaborador: string;
  items: {
    id: string; // stock item id
    classe: 'UNIFORME' | 'EPI';
    tipo: string;
    tamanho: string;
    quantidade: number;
  }[];
  data: string; // ISO Date String
  receiptGeneratedAt?: string; // ISO Date String
}

export interface PdfSettings {
    id?: number; // settings stored in a single row
    created_at?: string;
    headerTitle: string;
    branchName: string;
    managerName: string;
    logoURL: string; // base64 data URL
}

export interface Vehicle extends SupabaseBase {
  id: string;
  placa: string;
  filial: string;
  tipo: string;
  modelo: string;
  chassi: string;
  ano: string;
  isLocado?: boolean;
}

export interface DiariaSettings {
    id?: number;
    created_at?: string;
    valor_diaria: number;
    valor_pernoite: number;
    valor_diaria_carreteiro: number;
}

export interface Diaria extends SupabaseBase {
    id: string;
    solicitante: string;
    idColaborador: string;
    data_inicial: string;
    data_final: string;
    hora_inicial: string;
    hora_final: string;
    destino: string;
    observacao: string;
    centro_custo: string;
    total_cafes: number;
    total_almocos: number;
    total_jantas: number;
    total_pernoites: number;
    valor_total_refeicoes: number;
    valor_total_pernoites: number;
    valor_total_geral: number;
}


export interface MockData { // Used for import/export structure
  clientes: Client[];
  hoteis: Hotel[];
  colaboradores: Collaborator[];
  solicitacoes: Request[];
  historico: HistoryRequest[];
  rotas: Rota[];
  stockItems: StockItem[];
  stockHistory: StockHistoryItem[];
  stockPdfSettings: PdfSettings;
  veiculos: Vehicle[];
  diarias: Diaria[];
  diariaSettings: DiariaSettings;
}

export type Page = 'main' | 'clients' | 'clientDetail' | 'requests' | 'collaborators' | 'settings'; // Kept for potential future use or context, but routing drives views.

// Props for common UI components
export interface ModalProps {
  children: ReactNode;
  onClose: () => void;
  title: string;
  modalContentClassName?: string;
  zIndex?: number;
}

export interface TooltipProps {
  text: string;
  children: ReactNode;
  tooltipClassName?: string; 
}

export interface CopyableFieldProps {
    label?: string;
    value: string;
    prefix?: string;
}

// Props for feature modules - adjusted for Redux & React Router
export interface ClientFeaturesProps {
  onNavigateToRequest: (hotel: Hotel, client: Client) => void;
  addNotification: AddNotificationType;
}

export interface RequestFeaturesProps {
  addNotification: AddNotificationType;
}

export interface CollaboratorFeaturesProps {
  addNotification: AddNotificationType;
}

export interface StockControlFeaturesProps {
  addNotification: AddNotificationType;
}

export interface FleetFeaturesProps {
  addNotification: AddNotificationType;
}

export interface DiariaFeaturesProps {
  addNotification: AddNotificationType;
}

export interface SettingsFeaturesProps {
  addNotification: AddNotificationType;
  importFullData: (data: MockData) => void; 
}

export type UseFormChangeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
export type UseFormSetFormData<T> = React.Dispatch<React.SetStateAction<T>>;
export type UseFormHook<T> = [T, UseFormChangeHandler, UseFormSetFormData<T>];

declare global {
  interface Window {
    XLSX: any; // For XLSX library
    jspdf: any; // For jsPDF library
  }
}
export interface AppThunk<ReturnType = void> {
  (dispatch: AppDispatch, getState: () => RootState): ReturnType;
}
export type AppDispatch = typeof AppStoreType.dispatch;


// Zod Schemas for Validation
export const clientFormSchema = z.object({
    cliente: z.string().min(1, "Nome do Cliente é obrigatório.").max(100, "Nome do Cliente muito longo."),
    cidade: z.string().min(1, "Cidade é obrigatória.").max(100, "Nome da Cidade muito longo."),
    distancia: z.string().optional().refine(val => !val || /^\d+$/.test(val), { message: "Distância deve ser um número." }),
    lat_final: z.string().optional()
        .refine(val => !val || /^-?\d{1,3}(?:\.\d+)?$/.test(val.replace(',', '.')), { message: "Latitude em formato inválido." })
        .refine(val => {
            if (!val) return true;
            const num = parseFloat(val.replace(',', '.'));
            return !isNaN(num) && num >= -90 && num <= 90;
        }, { message: "Latitude deve estar entre -90 e 90." }),
    lon_final: z.string().optional()
        .refine(val => !val || /^-?\d{1,3}(?:\.\d+)?$/.test(val.replace(',', '.')), { message: "Longitude em formato inválido." })
        .refine(val => {
            if (!val) return true;
            const num = parseFloat(val.replace(',', '.'));
            return !isNaN(num) && num >= -180 && num <= 180;
        }, { message: "Longitude deve estar entre -180 e 180." }),
});
export type ClientFormValidationErrors = z.ZodFormattedError<z.infer<typeof clientFormSchema>>;


export const hotelFormSchema = z.object({
    hotel: z.string().min(1, "Nome do Hotel é obrigatório.").max(100),
    cnpj: z.string().optional().refine(val => !val || /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(val) || /^\d{14}$/.test(val), {
        message: "CNPJ inválido. Use XX.XXX.XXX/XXXX-XX ou 14 dígitos.",
    }),
    telefone: z.string().max(20, "Telefone muito longo.").optional(),
    dados_pag: z.string().max(100, "Dados de pagamento muito longos.").optional(),
    quarto_ind: z.preprocess(
        val => (typeof val === 'string' && val.trim() === '') ? undefined : val,
        z.coerce.number({ message: "Valor inválido"}).min(0, "Valor não pode ser negativo.").optional()
    ),
    quarto_dup: z.preprocess(
        val => (typeof val === 'string' && val.trim() === '') ? undefined : val,
        z.coerce.number({ message: "Valor inválido"}).min(0, "Valor não pode ser negativo.").optional()
    ),
    quarto_tri: z.preprocess(
        val => (typeof val === 'string' && val.trim() === '') ? undefined : val,
        z.coerce.number({ message: "Valor inválido"}).min(0, "Valor não pode ser negativo.").optional()
    ),
});
export type HotelFormValidationErrors = z.ZodFormattedError<z.infer<typeof hotelFormSchema>>;


export const collaboratorFormSchema = z.object({
    nome: z.string().min(1, "Nome é obrigatório.").max(100),
    cpf: z.string().min(1, "CPF é obrigatório.").max(14)
        .refine(val => /^[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}$/.test(val) || /^[0-9]{11}$/.test(val.replace(/\D/g, '')), {
            message: "CPF inválido. Use XXX.XXX.XXX-XX ou 11 dígitos.",
        }),
    data_nasc: z.string().optional().refine(val => !val || /^\d{4}-\d{2}-\d{2}$/.test(val), {
        message: "Data de nascimento inválida. Use AAAA-MM-DD.",
    }),
    pix: z.string().max(100).optional(),
    banco: z.string().max(50).optional(),
    telefone: z.string().max(20).optional(),
    filial: z.string().max(50).optional(),
    funcao: z.enum(['Técnico', 'Motorista', 'Mangueirista', 'Carreteiro', 'Outros', '']).optional(),
    funcao_outros: z.string().max(50).optional(),
    valor_diaria_custom: z.preprocess(
        val => (typeof val === 'string' && val.trim() === '') ? undefined : String(val).replace(',', '.'),
        z.coerce.number({ message: "Valor inválido"}).min(0, "Valor não pode ser negativo.").optional()
    ),
    valor_pernoite_custom: z.preprocess(
        val => (typeof val === 'string' && val.trim() === '') ? undefined : String(val).replace(',', '.'),
        z.coerce.number({ message: "Valor inválido"}).min(0, "Valor não pode ser negativo.").optional()
    ),
}).refine(data => data.funcao !== 'Outros' || (data.funcao_outros && data.funcao_outros.trim() !== ''), {
    message: "Especifique a função para 'Outros'.",
    path: ["funcao_outros"],
});
export type CollaboratorFormValidationErrors = z.ZodFormattedError<z.infer<typeof collaboratorFormSchema>>;


export const requestFormSchema = z.object({
  solicitante: z.string().min(1, "Solicitante é obrigatório.").max(100),
  data_solicitacao: z.string().refine(val => /^\d{4}-\d{2}-\d{2}$/.test(val), {
    message: "Data da solicitação inválida.",
  }),
  centro_custo: z.string().min(1, "Centro de Custo é obrigatório.").max(50),
  equipe_members: z.string().min(1, "Pelo menos um membro da equipe é obrigatório.").max(255),
  client_name: z.string().min(1, "Nome do cliente é obrigatório.").max(100),
  hotel_name: z.string().min(1, "Nome do hotel é obrigatório.").max(100),
  check_in: z.string().refine(val => /^\d{4}-\d{2}-\d{2}$/.test(val), {
    message: "Data de check-in inválida.",
  }),
  check_out: z.string().refine(val => /^\d{4}-\d{2}-\d{2}$/.test(val), {
    message: "Data de check-out inválida.",
  }),
  valor_diaria: z.coerce.number({ message: "Valor da diária deve ser um número." }).min(0, "Valor da diária não pode ser negativo."),
  pix: z.string().max(100).optional(),
  cnpj: z.string().optional().refine(val => !val || /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(val) || /^\d{14}$/.test(val.replace(/\D/g,'')), {
    message: "CNPJ inválido. Use XX.XXX.XXX/XXXX-XX ou 14 dígitos.",
  }),
  nf: z.string().max(50).optional(),
}).refine(data => {
    if (data.check_in && data.check_out) {
        return new Date(data.check_in) <= new Date(data.check_out);
    }
    return true;
}, {
    message: "Data de check-out não pode ser anterior à data de check-in.",
    path: ["check_out"],
});
export type RequestFormValidationErrors = z.ZodFormattedError<z.infer<typeof requestFormSchema>>;


// Constants for pagination
export const ITEMS_PER_PAGE = 10;
export const MAX_FILE_SIZE_BYTES = 5 * 1024 * 1024; // 5MB
export const ALLOWED_FILE_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
export const ALLOWED_FILE_EXTENSIONS_MSG = "Permitido: PDF, PNG, JPG, JPEG (Máx 5MB)";
export const ATTACHMENT_STATUS_OPTIONS = [
    { value: -1, label: "Todos os Status" },
    { value: 1, label: "Completo" },
    { value: 0, label: "Pendente" },
];

export const DEFAULT_NOTIFICATION_DURATION = 3000;
export const UNDO_NOTIFICATION_DURATION = 7000;